"use strict";
const config_1 = require('./config/config');
const common_tags_1 = require('common-tags');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
exports.CLI_CONFIG_FILE_NAME = '.angular-cli.json';
const CLI_CONFIG_FILE_NAME_ALT = 'angular-cli.json';
function _findUp(name, from) {
    let currentDir = from;
    while (currentDir && currentDir !== path.parse(currentDir).root) {
        const p = path.join(currentDir, name);
        if (fs.existsSync(p)) {
            return p;
        }
        const nodeModuleP = path.join(currentDir, 'node_modules');
        if (fs.existsSync(nodeModuleP)) {
            return null;
        }
        currentDir = path.dirname(currentDir);
    }
    return null;
}
function getUserHome() {
    return process.env[(process.platform.startsWith('win')) ? 'USERPROFILE' : 'HOME'];
}
class CliConfig extends config_1.CliConfig {
    static configFilePath(projectPath) {
        // Find the configuration, either where specified, in the Angular CLI project
        // (if it's in node_modules) or from the current process.
        return (projectPath && _findUp(exports.CLI_CONFIG_FILE_NAME, projectPath))
            || (projectPath && _findUp(CLI_CONFIG_FILE_NAME_ALT, projectPath))
            || _findUp(exports.CLI_CONFIG_FILE_NAME, process.cwd())
            || _findUp(CLI_CONFIG_FILE_NAME_ALT, process.cwd())
            || _findUp(exports.CLI_CONFIG_FILE_NAME, __dirname)
            || _findUp(CLI_CONFIG_FILE_NAME_ALT, __dirname);
    }
    static fromGlobal() {
        let globalConfigPath = path.join(getUserHome(), exports.CLI_CONFIG_FILE_NAME);
        const altGlobalConfigPath = path.join(getUserHome(), CLI_CONFIG_FILE_NAME_ALT);
        if (!fs.existsSync(globalConfigPath) && fs.existsSync(altGlobalConfigPath)) {
            globalConfigPath = altGlobalConfigPath;
        }
        const cliConfig = config_1.CliConfig.fromConfigPath(globalConfigPath);
        const aliases = [
            cliConfig.alias('apps.0.root', 'defaults.sourceDir'),
            cliConfig.alias('apps.0.prefix', 'defaults.prefix')
        ];
        // Additional aliases which do not emit any messages.
        cliConfig.alias('defaults.interface.prefix', 'defaults.inline.prefixInterfaces');
        cliConfig.alias('defaults.component.inlineStyle', 'defaults.inline.style');
        cliConfig.alias('defaults.component.inlineTemplate', 'defaults.inline.template');
        cliConfig.alias('defaults.component.spec', 'defaults.spec.component');
        cliConfig.alias('defaults.class.spec', 'defaults.spec.class');
        cliConfig.alias('defaults.component.directive', 'defaults.spec.directive');
        cliConfig.alias('defaults.component.module', 'defaults.spec.module');
        cliConfig.alias('defaults.component.pipe', 'defaults.spec.pipe');
        cliConfig.alias('defaults.component.service', 'defaults.spec.service');
        // If any of them returned true, output a deprecation warning.
        if (aliases.some(x => !!x)) {
            console.error(chalk.yellow(common_tags_1.oneLine `
        The "defaults.prefix" and "defaults.sourceDir" properties of .angular-cli.json
        are deprecated in favor of "apps[0].root" and "apps[0].prefix".\n
        Please update in order to avoid errors in future versions of Angular CLI.
      `));
        }
        return cliConfig;
    }
    static fromProject() {
        const configPath = this.configFilePath();
        if (!configPath) {
            return null;
        }
        let globalConfigPath = path.join(getUserHome(), exports.CLI_CONFIG_FILE_NAME);
        const altGlobalConfigPath = path.join(getUserHome(), CLI_CONFIG_FILE_NAME_ALT);
        if (!fs.existsSync(globalConfigPath) && fs.existsSync(altGlobalConfigPath)) {
            globalConfigPath = altGlobalConfigPath;
        }
        const cliConfig = config_1.CliConfig.fromConfigPath(CliConfig.configFilePath(), [globalConfigPath]);
        const aliases = [
            cliConfig.alias('apps.0.root', 'defaults.sourceDir'),
            cliConfig.alias('apps.0.prefix', 'defaults.prefix')
        ];
        // If any of them returned true, output a deprecation warning.
        if (aliases.some(x => !!x)) {
            console.error(chalk.yellow(common_tags_1.oneLine `
        The "defaults.prefix" and "defaults.sourceDir" properties of .angular-cli.json
        are deprecated in favor of "apps[0].root" and "apps[0].prefix".\n
        Please update in order to avoid errors in future versions of Angular CLI.
      `));
        }
        return cliConfig;
    }
}
exports.CliConfig = CliConfig;
//# sourceMappingURL=/Users/hansl/Sources/angular-cli/packages/@angular/cli/models/config.js.map