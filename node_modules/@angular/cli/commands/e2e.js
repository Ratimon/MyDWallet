"use strict";
const SilentError = require('silent-error');
const config_1 = require('../models/config');
const serve_1 = require('./serve');
const Command = require('../ember-cli/lib/models/command');
exports.e2eCommandOptions = serve_1.baseServeCommandOptions.concat([
    { name: 'config', type: String, aliases: ['c'] },
    { name: 'specs', type: Array, default: [], aliases: ['sp'] },
    { name: 'element-explorer', type: Boolean, default: false, aliases: ['ee'] },
    { name: 'webdriver-update', type: Boolean, default: true, aliases: ['wu'] },
    { name: 'serve', type: Boolean, default: true, aliases: ['s'] }
]);
const E2eCommand = Command.extend({
    name: 'e2e',
    aliases: ['e'],
    description: 'Run e2e tests in existing project',
    works: 'insideProject',
    availableOptions: exports.e2eCommandOptions,
    run: function (commandOptions) {
        const E2eTask = require('../tasks/e2e').E2eTask;
        this.project.ngConfig = this.project.ngConfig || config_1.CliConfig.fromProject();
        const additionalDefaults = {
            watch: false
        };
        commandOptions = Object.assign({}, additionalDefaults, commandOptions);
        const e2eTask = new E2eTask({
            ui: this.ui,
            project: this.project
        });
        if (!commandOptions.config) {
            const e2eConfig = config_1.CliConfig.fromProject().config.e2e;
            if (!e2eConfig.protractor.config) {
                throw new SilentError('No protractor config found in .angular-cli.json.');
            }
            commandOptions.config = e2eConfig.protractor.config;
        }
        if (commandOptions.serve) {
            const ServeTask = require('../tasks/serve').default;
            const serve = new ServeTask({
                ui: this.ui,
                project: this.project,
            });
            // Protractor will end the proccess, so we don't need to kill the dev server
            return new Promise((resolve, reject) => {
                let firstRebuild = true;
                function rebuildCb() {
                    // don't run re-run tests on subsequent rebuilds
                    if (firstRebuild) {
                        firstRebuild = false;
                        return resolve(e2eTask.run(commandOptions));
                    }
                }
                serve.run(commandOptions, rebuildCb)
                    .catch(reject);
            });
        }
        else {
            return e2eTask.run(commandOptions);
        }
    }
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = E2eCommand;
//# sourceMappingURL=/Users/hansl/Sources/angular-cli/packages/@angular/cli/commands/e2e.js.map